// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Config extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Config entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Config entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Config", id.toString(), this);
  }

  static load(id: string): Config | null {
    return store.get("Config", id) as Config | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get conviction(): string | null {
    let value = this.get("conviction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set conviction(value: string | null) {
    if (value === null) {
      this.unset("conviction");
    } else {
      this.set("conviction", Value.fromString(value as string));
    }
  }

  get voting(): string | null {
    let value = this.get("voting");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set voting(value: string | null) {
    if (value === null) {
      this.unset("voting");
    } else {
      this.set("voting", Value.fromString(value as string));
    }
  }
}

export class ConvictionConfig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ConvictionConfig entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ConvictionConfig entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ConvictionConfig", id.toString(), this);
  }

  static load(id: string): ConvictionConfig | null {
    return store.get("ConvictionConfig", id) as ConvictionConfig | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get decay(): BigInt {
    let value = this.get("decay");
    return value.toBigInt();
  }

  set decay(value: BigInt) {
    this.set("decay", Value.fromBigInt(value));
  }

  get weight(): BigInt {
    let value = this.get("weight");
    return value.toBigInt();
  }

  set weight(value: BigInt) {
    this.set("weight", Value.fromBigInt(value));
  }

  get maxRatio(): BigInt {
    let value = this.get("maxRatio");
    return value.toBigInt();
  }

  set maxRatio(value: BigInt) {
    this.set("maxRatio", Value.fromBigInt(value));
  }

  get pctBase(): BigInt {
    let value = this.get("pctBase");
    return value.toBigInt();
  }

  set pctBase(value: BigInt) {
    this.set("pctBase", Value.fromBigInt(value));
  }

  get stakeToken(): string | null {
    let value = this.get("stakeToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stakeToken(value: string | null) {
    if (value === null) {
      this.unset("stakeToken");
    } else {
      this.set("stakeToken", Value.fromString(value as string));
    }
  }

  get totalStaked(): BigInt {
    let value = this.get("totalStaked");
    return value.toBigInt();
  }

  set totalStaked(value: BigInt) {
    this.set("totalStaked", Value.fromBigInt(value));
  }

  get maxStakedProposals(): i32 {
    let value = this.get("maxStakedProposals");
    return value.toI32();
  }

  set maxStakedProposals(value: i32) {
    this.set("maxStakedProposals", Value.fromI32(value));
  }

  get minThresholdStakePercentage(): BigInt {
    let value = this.get("minThresholdStakePercentage");
    return value.toBigInt();
  }

  set minThresholdStakePercentage(value: BigInt) {
    this.set("minThresholdStakePercentage", Value.fromBigInt(value));
  }

  get requestToken(): string | null {
    let value = this.get("requestToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set requestToken(value: string | null) {
    if (value === null) {
      this.unset("requestToken");
    } else {
      this.set("requestToken", Value.fromString(value as string));
    }
  }

  get stableToken(): string | null {
    let value = this.get("stableToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stableToken(value: string | null) {
    if (value === null) {
      this.unset("stableToken");
    } else {
      this.set("stableToken", Value.fromString(value as string));
    }
  }

  get stableTokenOracle(): Bytes | null {
    let value = this.get("stableTokenOracle");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set stableTokenOracle(value: Bytes | null) {
    if (value === null) {
      this.unset("stableTokenOracle");
    } else {
      this.set("stableTokenOracle", Value.fromBytes(value as Bytes));
    }
  }

  get contractPaused(): boolean {
    let value = this.get("contractPaused");
    return value.toBoolean();
  }

  set contractPaused(value: boolean) {
    this.set("contractPaused", Value.fromBoolean(value));
  }
}

export class VotingConfig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VotingConfig entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VotingConfig entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VotingConfig", id.toString(), this);
  }

  static load(id: string): VotingConfig | null {
    return store.get("VotingConfig", id) as VotingConfig | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(value as string));
    }
  }

  get settingId(): BigInt {
    let value = this.get("settingId");
    return value.toBigInt();
  }

  set settingId(value: BigInt) {
    this.set("settingId", Value.fromBigInt(value));
  }

  get voteTime(): BigInt {
    let value = this.get("voteTime");
    return value.toBigInt();
  }

  set voteTime(value: BigInt) {
    this.set("voteTime", Value.fromBigInt(value));
  }

  get supportRequiredPct(): BigInt {
    let value = this.get("supportRequiredPct");
    return value.toBigInt();
  }

  set supportRequiredPct(value: BigInt) {
    this.set("supportRequiredPct", Value.fromBigInt(value));
  }

  get minimumAcceptanceQuorumPct(): BigInt {
    let value = this.get("minimumAcceptanceQuorumPct");
    return value.toBigInt();
  }

  set minimumAcceptanceQuorumPct(value: BigInt) {
    this.set("minimumAcceptanceQuorumPct", Value.fromBigInt(value));
  }

  get delegatedVotingPeriod(): BigInt {
    let value = this.get("delegatedVotingPeriod");
    return value.toBigInt();
  }

  set delegatedVotingPeriod(value: BigInt) {
    this.set("delegatedVotingPeriod", Value.fromBigInt(value));
  }

  get quietEndingPeriod(): BigInt {
    let value = this.get("quietEndingPeriod");
    return value.toBigInt();
  }

  set quietEndingPeriod(value: BigInt) {
    this.set("quietEndingPeriod", Value.fromBigInt(value));
  }

  get quietEndingExtension(): BigInt {
    let value = this.get("quietEndingExtension");
    return value.toBigInt();
  }

  set quietEndingExtension(value: BigInt) {
    this.set("quietEndingExtension", Value.fromBigInt(value));
  }

  get executionDelay(): BigInt {
    let value = this.get("executionDelay");
    return value.toBigInt();
  }

  set executionDelay(value: BigInt) {
    this.set("executionDelay", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Proposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Proposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Proposal", id.toString(), this);
  }

  static load(id: string): Proposal | null {
    return store.get("Proposal", id) as Proposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    return value.toBigInt();
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get statusInt(): i32 {
    let value = this.get("statusInt");
    return value.toI32();
  }

  set statusInt(value: i32) {
    this.set("statusInt", Value.fromI32(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get typeInt(): i32 {
    let value = this.get("typeInt");
    return value.toI32();
  }

  set typeInt(value: i32) {
    this.set("typeInt", Value.fromI32(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get weight(): BigInt {
    let value = this.get("weight");
    return value.toBigInt();
  }

  set weight(value: BigInt) {
    this.set("weight", Value.fromBigInt(value));
  }

  get metadata(): string | null {
    let value = this.get("metadata");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadata(value: string | null) {
    if (value === null) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromString(value as string));
    }
  }

  get executedAt(): BigInt | null {
    let value = this.get("executedAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("executedAt");
    } else {
      this.set("executedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get link(): string | null {
    let value = this.get("link");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set link(value: string | null) {
    if (value === null) {
      this.unset("link");
    } else {
      this.set("link", Value.fromString(value as string));
    }
  }

  get stakes(): Array<string> | null {
    let value = this.get("stakes");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stakes(value: Array<string> | null) {
    if (value === null) {
      this.unset("stakes");
    } else {
      this.set("stakes", Value.fromStringArray(value as Array<string>));
    }
  }

  get stakesHistory(): Array<string> | null {
    let value = this.get("stakesHistory");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stakesHistory(value: Array<string> | null) {
    if (value === null) {
      this.unset("stakesHistory");
    } else {
      this.set("stakesHistory", Value.fromStringArray(value as Array<string>));
    }
  }

  get beneficiary(): Bytes | null {
    let value = this.get("beneficiary");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set beneficiary(value: Bytes | null) {
    if (value === null) {
      this.unset("beneficiary");
    } else {
      this.set("beneficiary", Value.fromBytes(value as Bytes));
    }
  }

  get convictionLast(): BigInt | null {
    let value = this.get("convictionLast");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set convictionLast(value: BigInt | null) {
    if (value === null) {
      this.unset("convictionLast");
    } else {
      this.set("convictionLast", Value.fromBigInt(value as BigInt));
    }
  }

  get requestedAmount(): BigInt | null {
    let value = this.get("requestedAmount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestedAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("requestedAmount");
    } else {
      this.set("requestedAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get totalTokensStaked(): BigInt | null {
    let value = this.get("totalTokensStaked");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalTokensStaked(value: BigInt | null) {
    if (value === null) {
      this.unset("totalTokensStaked");
    } else {
      this.set("totalTokensStaked", Value.fromBigInt(value as BigInt));
    }
  }

  get stable(): boolean {
    let value = this.get("stable");
    return value.toBoolean();
  }

  set stable(value: boolean) {
    this.set("stable", Value.fromBoolean(value));
  }

  get setting(): string | null {
    let value = this.get("setting");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set setting(value: string | null) {
    if (value === null) {
      this.unset("setting");
    } else {
      this.set("setting", Value.fromString(value as string));
    }
  }

  get startDate(): BigInt | null {
    let value = this.get("startDate");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startDate(value: BigInt | null) {
    if (value === null) {
      this.unset("startDate");
    } else {
      this.set("startDate", Value.fromBigInt(value as BigInt));
    }
  }

  get totalPower(): BigInt | null {
    let value = this.get("totalPower");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalPower(value: BigInt | null) {
    if (value === null) {
      this.unset("totalPower");
    } else {
      this.set("totalPower", Value.fromBigInt(value as BigInt));
    }
  }

  get snapshotBlock(): BigInt {
    let value = this.get("snapshotBlock");
    return value.toBigInt();
  }

  set snapshotBlock(value: BigInt) {
    this.set("snapshotBlock", Value.fromBigInt(value));
  }

  get yeas(): BigInt | null {
    let value = this.get("yeas");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set yeas(value: BigInt | null) {
    if (value === null) {
      this.unset("yeas");
    } else {
      this.set("yeas", Value.fromBigInt(value as BigInt));
    }
  }

  get nays(): BigInt | null {
    let value = this.get("nays");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nays(value: BigInt | null) {
    if (value === null) {
      this.unset("nays");
    } else {
      this.set("nays", Value.fromBigInt(value as BigInt));
    }
  }

  get quietEndingExtensionDuration(): BigInt | null {
    let value = this.get("quietEndingExtensionDuration");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set quietEndingExtensionDuration(value: BigInt | null) {
    if (value === null) {
      this.unset("quietEndingExtensionDuration");
    } else {
      this.set(
        "quietEndingExtensionDuration",
        Value.fromBigInt(value as BigInt)
      );
    }
  }

  get quietEndingSnapshotSupport(): string | null {
    let value = this.get("quietEndingSnapshotSupport");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set quietEndingSnapshotSupport(value: string | null) {
    if (value === null) {
      this.unset("quietEndingSnapshotSupport");
    } else {
      this.set("quietEndingSnapshotSupport", Value.fromString(value as string));
    }
  }

  get script(): Bytes | null {
    let value = this.get("script");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set script(value: Bytes | null) {
    if (value === null) {
      this.unset("script");
    } else {
      this.set("script", Value.fromBytes(value as Bytes));
    }
  }

  get isAccepted(): boolean {
    let value = this.get("isAccepted");
    return value.toBoolean();
  }

  set isAccepted(value: boolean) {
    this.set("isAccepted", Value.fromBoolean(value));
  }

  get castVotes(): Array<string> | null {
    let value = this.get("castVotes");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set castVotes(value: Array<string> | null) {
    if (value === null) {
      this.unset("castVotes");
    } else {
      this.set("castVotes", Value.fromStringArray(value as Array<string>));
    }
  }

  get actionId(): BigInt {
    let value = this.get("actionId");
    return value.toBigInt();
  }

  set actionId(value: BigInt) {
    this.set("actionId", Value.fromBigInt(value));
  }

  get disputeId(): BigInt | null {
    let value = this.get("disputeId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set disputeId(value: BigInt | null) {
    if (value === null) {
      this.unset("disputeId");
    } else {
      this.set("disputeId", Value.fromBigInt(value as BigInt));
    }
  }

  get challengeId(): BigInt {
    let value = this.get("challengeId");
    return value.toBigInt();
  }

  set challengeId(value: BigInt) {
    this.set("challengeId", Value.fromBigInt(value));
  }

  get challenger(): Bytes {
    let value = this.get("challenger");
    return value.toBytes();
  }

  set challenger(value: Bytes) {
    this.set("challenger", Value.fromBytes(value));
  }

  get challengeEndDate(): BigInt {
    let value = this.get("challengeEndDate");
    return value.toBigInt();
  }

  set challengeEndDate(value: BigInt) {
    this.set("challengeEndDate", Value.fromBigInt(value));
  }

  get settledAt(): BigInt {
    let value = this.get("settledAt");
    return value.toBigInt();
  }

  set settledAt(value: BigInt) {
    this.set("settledAt", Value.fromBigInt(value));
  }

  get settlementOffer(): BigInt | null {
    let value = this.get("settlementOffer");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set settlementOffer(value: BigInt | null) {
    if (value === null) {
      this.unset("settlementOffer");
    } else {
      this.set("settlementOffer", Value.fromBigInt(value as BigInt));
    }
  }

  get disputedAt(): BigInt {
    let value = this.get("disputedAt");
    return value.toBigInt();
  }

  set disputedAt(value: BigInt) {
    this.set("disputedAt", Value.fromBigInt(value));
  }

  get pausedAt(): BigInt {
    let value = this.get("pausedAt");
    return value.toBigInt();
  }

  set pausedAt(value: BigInt) {
    this.set("pausedAt", Value.fromBigInt(value));
  }

  get pauseDuration(): BigInt {
    let value = this.get("pauseDuration");
    return value.toBigInt();
  }

  set pauseDuration(value: BigInt) {
    this.set("pauseDuration", Value.fromBigInt(value));
  }

  get submitterArbitratorFee(): string | null {
    let value = this.get("submitterArbitratorFee");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set submitterArbitratorFee(value: string | null) {
    if (value === null) {
      this.unset("submitterArbitratorFee");
    } else {
      this.set("submitterArbitratorFee", Value.fromString(value as string));
    }
  }

  get challengerArbitratorFee(): string | null {
    let value = this.get("challengerArbitratorFee");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set challengerArbitratorFee(value: string | null) {
    if (value === null) {
      this.unset("challengerArbitratorFee");
    } else {
      this.set("challengerArbitratorFee", Value.fromString(value as string));
    }
  }

  get collateralRequirement(): string | null {
    let value = this.get("collateralRequirement");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collateralRequirement(value: string | null) {
    if (value === null) {
      this.unset("collateralRequirement");
    } else {
      this.set("collateralRequirement", Value.fromString(value as string));
    }
  }
}

export class Cast extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Cast entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Cast entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Cast", id.toString(), this);
  }

  static load(id: string): Cast | null {
    return store.get("Cast", id) as Cast | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get entity(): string {
    let value = this.get("entity");
    return value.toString();
  }

  set entity(value: string) {
    this.set("entity", Value.fromString(value));
  }

  get caster(): Bytes {
    let value = this.get("caster");
    return value.toBytes();
  }

  set caster(value: Bytes) {
    this.set("caster", Value.fromBytes(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get supports(): boolean {
    let value = this.get("supports");
    return value.toBoolean();
  }

  set supports(value: boolean) {
    this.set("supports", Value.fromBoolean(value));
  }

  get stake(): BigInt {
    let value = this.get("stake");
    return value.toBigInt();
  }

  set stake(value: BigInt) {
    this.set("stake", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Stake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Stake entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Stake entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Stake", id.toString(), this);
  }

  static load(id: string): Stake | null {
    return store.get("Stake", id) as Stake | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get entity(): string {
    let value = this.get("entity");
    return value.toString();
  }

  set entity(value: string) {
    this.set("entity", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class StakeHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save StakeHistory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakeHistory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakeHistory", id.toString(), this);
  }

  static load(id: string): StakeHistory | null {
    return store.get("StakeHistory", id) as StakeHistory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get entity(): string {
    let value = this.get("entity");
    return value.toString();
  }

  set entity(value: string) {
    this.set("entity", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get tokensStaked(): BigInt {
    let value = this.get("tokensStaked");
    return value.toBigInt();
  }

  set tokensStaked(value: BigInt) {
    this.set("tokensStaked", Value.fromBigInt(value));
  }

  get totalTokensStaked(): BigInt {
    let value = this.get("totalTokensStaked");
    return value.toBigInt();
  }

  set totalTokensStaked(value: BigInt) {
    this.set("totalTokensStaked", Value.fromBigInt(value));
  }

  get conviction(): BigInt {
    let value = this.get("conviction");
    return value.toBigInt();
  }

  set conviction(value: BigInt) {
    this.set("conviction", Value.fromBigInt(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Supporter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Supporter entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Supporter entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Supporter", id.toString(), this);
  }

  static load(id: string): Supporter | null {
    return store.get("Supporter", id) as Supporter | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get representative(): Bytes | null {
    let value = this.get("representative");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set representative(value: Bytes | null) {
    if (value === null) {
      this.unset("representative");
    } else {
      this.set("representative", Value.fromBytes(value as Bytes));
    }
  }

  get casts(): Array<string> | null {
    let value = this.get("casts");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set casts(value: Array<string> | null) {
    if (value === null) {
      this.unset("casts");
    } else {
      this.set("casts", Value.fromStringArray(value as Array<string>));
    }
  }

  get stakes(): Array<string> | null {
    let value = this.get("stakes");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stakes(value: Array<string> | null) {
    if (value === null) {
      this.unset("stakes");
    } else {
      this.set("stakes", Value.fromStringArray(value as Array<string>));
    }
  }

  get stakesHistory(): Array<string> | null {
    let value = this.get("stakesHistory");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stakesHistory(value: Array<string> | null) {
    if (value === null) {
      this.unset("stakesHistory");
    } else {
      this.set("stakesHistory", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class CollateralRequirement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CollateralRequirement entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CollateralRequirement entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CollateralRequirement", id.toString(), this);
  }

  static load(id: string): CollateralRequirement | null {
    return store.get(
      "CollateralRequirement",
      id
    ) as CollateralRequirement | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string | null {
    let value = this.get("proposal");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proposal(value: string | null) {
    if (value === null) {
      this.unset("proposal");
    } else {
      this.set("proposal", Value.fromString(value as string));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(value as string));
    }
  }

  get actionAmount(): BigInt | null {
    let value = this.get("actionAmount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set actionAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("actionAmount");
    } else {
      this.set("actionAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get challengeAmount(): BigInt | null {
    let value = this.get("challengeAmount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set challengeAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("challengeAmount");
    } else {
      this.set("challengeAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get challengeDuration(): BigInt | null {
    let value = this.get("challengeDuration");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set challengeDuration(value: BigInt | null) {
    if (value === null) {
      this.unset("challengeDuration");
    } else {
      this.set("challengeDuration", Value.fromBigInt(value as BigInt));
    }
  }
}

export class ArbitratorFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ArbitratorFee entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ArbitratorFee entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ArbitratorFee", id.toString(), this);
  }

  static load(id: string): ArbitratorFee | null {
    return store.get("ArbitratorFee", id) as ArbitratorFee | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}
