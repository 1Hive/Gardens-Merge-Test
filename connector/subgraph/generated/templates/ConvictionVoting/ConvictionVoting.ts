// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ContractPaused extends ethereum.Event {
  get params(): ContractPaused__Params {
    return new ContractPaused__Params(this);
  }
}

export class ContractPaused__Params {
  _event: ContractPaused;

  constructor(event: ContractPaused) {
    this._event = event;
  }

  get pauseEnabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class ConvictionSettingsChanged extends ethereum.Event {
  get params(): ConvictionSettingsChanged__Params {
    return new ConvictionSettingsChanged__Params(this);
  }
}

export class ConvictionSettingsChanged__Params {
  _event: ConvictionSettingsChanged;

  constructor(event: ConvictionSettingsChanged) {
    this._event = event;
  }

  get decay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maxRatio(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get minThresholdStakePercentage(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ProposalAdded extends ethereum.Event {
  get params(): ProposalAdded__Params {
    return new ProposalAdded__Params(this);
  }
}

export class ProposalAdded__Params {
  _event: ProposalAdded;

  constructor(event: ProposalAdded) {
    this._event = event;
  }

  get entity(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get actionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get title(): string {
    return this._event.parameters[3].value.toString();
  }

  get link(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get stable(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }

  get beneficiary(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class StakeAdded extends ethereum.Event {
  get params(): StakeAdded__Params {
    return new StakeAdded__Params(this);
  }
}

export class StakeAdded__Params {
  _event: StakeAdded;

  constructor(event: StakeAdded) {
    this._event = event;
  }

  get entity(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokensStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalTokensStaked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get conviction(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class StakeWithdrawn extends ethereum.Event {
  get params(): StakeWithdrawn__Params {
    return new StakeWithdrawn__Params(this);
  }
}

export class StakeWithdrawn__Params {
  _event: StakeWithdrawn;

  constructor(event: StakeWithdrawn) {
    this._event = event;
  }

  get entity(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokensStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalTokensStaked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get conviction(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ProposalExecuted extends ethereum.Event {
  get params(): ProposalExecuted__Params {
    return new ProposalExecuted__Params(this);
  }
}

export class ProposalExecuted__Params {
  _event: ProposalExecuted;

  constructor(event: ProposalExecuted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get conviction(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProposalPaused extends ethereum.Event {
  get params(): ProposalPaused__Params {
    return new ProposalPaused__Params(this);
  }
}

export class ProposalPaused__Params {
  _event: ProposalPaused;

  constructor(event: ProposalPaused) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get challengeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProposalResumed extends ethereum.Event {
  get params(): ProposalResumed__Params {
    return new ProposalResumed__Params(this);
  }
}

export class ProposalResumed__Params {
  _event: ProposalResumed;

  constructor(event: ProposalResumed) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProposalCancelled extends ethereum.Event {
  get params(): ProposalCancelled__Params {
    return new ProposalCancelled__Params(this);
  }
}

export class ProposalCancelled__Params {
  _event: ProposalCancelled;

  constructor(event: ProposalCancelled) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProposalRejected extends ethereum.Event {
  get params(): ProposalRejected__Params {
    return new ProposalRejected__Params(this);
  }
}

export class ProposalRejected__Params {
  _event: ProposalRejected;

  constructor(event: ProposalRejected) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ScriptResult extends ethereum.Event {
  get params(): ScriptResult__Params {
    return new ScriptResult__Params(this);
  }
}

export class ScriptResult__Params {
  _event: ScriptResult;

  constructor(event: ScriptResult) {
    this._event = event;
  }

  get executor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get script(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get input(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get returnData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class RecoverToVault extends ethereum.Event {
  get params(): RecoverToVault__Params {
    return new RecoverToVault__Params(this);
  }
}

export class RecoverToVault__Params {
  _event: RecoverToVault;

  constructor(event: RecoverToVault) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AgreementSet extends ethereum.Event {
  get params(): AgreementSet__Params {
    return new AgreementSet__Params(this);
  }
}

export class AgreementSet__Params {
  _event: AgreementSet;

  constructor(event: AgreementSet) {
    this._event = event;
  }

  get agreement(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ConvictionVoting__getProposalResult {
  value0: BigInt;
  value1: boolean;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: i32;
  value8: Address;
  value9: BigInt;

  constructor(
    value0: BigInt,
    value1: boolean,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: i32,
    value8: Address,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class ConvictionVoting extends ethereum.SmartContract {
  static bind(address: Address): ConvictionVoting {
    return new ConvictionVoting("ConvictionVoting", address);
  }

  supportsInterface(_interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stableTokenOracle(): Address {
    let result = super.call(
      "stableTokenOracle",
      "stableTokenOracle():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stableTokenOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stableTokenOracle",
      "stableTokenOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasInitialized(): boolean {
    let result = super.call("hasInitialized", "hasInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasInitialized", "hasInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proposalCounter(): BigInt {
    let result = super.call(
      "proposalCounter",
      "proposalCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalCounter",
      "proposalCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  D(): BigInt {
    let result = super.call("D", "D():(uint256)", []);

    return result[0].toBigInt();
  }

  try_D(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("D", "D():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ABSTAIN_PROPOSAL_ID(): BigInt {
    let result = super.call(
      "ABSTAIN_PROPOSAL_ID",
      "ABSTAIN_PROPOSAL_ID():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ABSTAIN_PROPOSAL_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ABSTAIN_PROPOSAL_ID",
      "ABSTAIN_PROPOSAL_ID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEVMScriptExecutor(_script: Bytes): Address {
    let result = super.call(
      "getEVMScriptExecutor",
      "getEVMScriptExecutor(bytes):(address)",
      [ethereum.Value.fromBytes(_script)]
    );

    return result[0].toAddress();
  }

  try_getEVMScriptExecutor(_script: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEVMScriptExecutor",
      "getEVMScriptExecutor(bytes):(address)",
      [ethereum.Value.fromBytes(_script)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRecoveryVault(): Address {
    let result = super.call(
      "getRecoveryVault",
      "getRecoveryVault():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getRecoveryVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRecoveryVault",
      "getRecoveryVault():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MAX_STAKED_PROPOSALS(): BigInt {
    let result = super.call(
      "MAX_STAKED_PROPOSALS",
      "MAX_STAKED_PROPOSALS():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_STAKED_PROPOSALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_STAKED_PROPOSALS",
      "MAX_STAKED_PROPOSALS():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onTransfer(_from: Address, _to: Address, _amount: BigInt): boolean {
    let result = super.call(
      "onTransfer",
      "onTransfer(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_onTransfer(
    _from: Address,
    _to: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onTransfer",
      "onTransfer(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  requestToken(): Address {
    let result = super.call("requestToken", "requestToken():(address)", []);

    return result[0].toAddress();
  }

  try_requestToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("requestToken", "requestToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  UPDATE_SETTINGS_ROLE(): Bytes {
    let result = super.call(
      "UPDATE_SETTINGS_ROLE",
      "UPDATE_SETTINGS_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_UPDATE_SETTINGS_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "UPDATE_SETTINGS_ROLE",
      "UPDATE_SETTINGS_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  stakeToken(): Address {
    let result = super.call("stakeToken", "stakeToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakeToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakeToken", "stakeToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decay(): BigInt {
    let result = super.call("decay", "decay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decay", "decay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateThreshold(_requestedAmount: BigInt): BigInt {
    let result = super.call(
      "calculateThreshold",
      "calculateThreshold(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_requestedAmount)]
    );

    return result[0].toBigInt();
  }

  try_calculateThreshold(
    _requestedAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateThreshold",
      "calculateThreshold(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_requestedAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canChallenge(_proposalId: BigInt): boolean {
    let result = super.call("canChallenge", "canChallenge(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_proposalId)
    ]);

    return result[0].toBoolean();
  }

  try_canChallenge(_proposalId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("canChallenge", "canChallenge(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getVoterStakedProposals(_voter: Address): Array<BigInt> {
    let result = super.call(
      "getVoterStakedProposals",
      "getVoterStakedProposals(address):(uint256[])",
      [ethereum.Value.fromAddress(_voter)]
    );

    return result[0].toBigIntArray();
  }

  try_getVoterStakedProposals(
    _voter: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getVoterStakedProposals",
      "getVoterStakedProposals(address):(uint256[])",
      [ethereum.Value.fromAddress(_voter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  maxRatio(): BigInt {
    let result = super.call("maxRatio", "maxRatio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxRatio", "maxRatio():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canClose(_proposalId: BigInt): boolean {
    let result = super.call("canClose", "canClose(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_proposalId)
    ]);

    return result[0].toBoolean();
  }

  try_canClose(_proposalId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("canClose", "canClose(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowRecoverability(token: Address): boolean {
    let result = super.call(
      "allowRecoverability",
      "allowRecoverability(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBoolean();
  }

  try_allowRecoverability(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowRecoverability",
      "allowRecoverability(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  appId(): Bytes {
    let result = super.call("appId", "appId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_appId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("appId", "appId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  totalStaked(): BigInt {
    let result = super.call("totalStaked", "totalStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStaked", "totalStaked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractPaused(): boolean {
    let result = super.call("contractPaused", "contractPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_contractPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("contractPaused", "contractPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getInitializationBlock(): BigInt {
    let result = super.call(
      "getInitializationBlock",
      "getInitializationBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getInitializationBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInitializationBlock",
      "getInitializationBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CHALLENGE_ROLE(): Bytes {
    let result = super.call("CHALLENGE_ROLE", "CHALLENGE_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_CHALLENGE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CHALLENGE_ROLE",
      "CHALLENGE_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  canPerform(_sender: Address, _role: Bytes, _params: Array<BigInt>): boolean {
    let result = super.call(
      "canPerform",
      "canPerform(address,bytes32,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromFixedBytes(_role),
        ethereum.Value.fromUnsignedBigIntArray(_params)
      ]
    );

    return result[0].toBoolean();
  }

  try_canPerform(
    _sender: Address,
    _role: Bytes,
    _params: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canPerform",
      "canPerform(address,bytes32,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromFixedBytes(_role),
        ethereum.Value.fromUnsignedBigIntArray(_params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  weight(): BigInt {
    let result = super.call("weight", "weight():(uint256)", []);

    return result[0].toBigInt();
  }

  try_weight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("weight", "weight():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEVMScriptRegistry(): Address {
    let result = super.call(
      "getEVMScriptRegistry",
      "getEVMScriptRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getEVMScriptRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEVMScriptRegistry",
      "getEVMScriptRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stableToken(): Address {
    let result = super.call("stableToken", "stableToken():(address)", []);

    return result[0].toAddress();
  }

  try_stableToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stableToken", "stableToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenManager(): Address {
    let result = super.call(
      "getTokenManager",
      "getTokenManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTokenManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenManager",
      "getTokenManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAgreement(): Address {
    let result = super.call("getAgreement", "getAgreement():(address)", []);

    return result[0].toAddress();
  }

  try_getAgreement(): ethereum.CallResult<Address> {
    let result = super.tryCall("getAgreement", "getAgreement():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProposal(_proposalId: BigInt): ConvictionVoting__getProposalResult {
    let result = super.call(
      "getProposal",
      "getProposal(uint256):(uint256,bool,address,uint256,uint256,uint64,uint256,uint8,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_proposalId)]
    );

    return new ConvictionVoting__getProposalResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toI32(),
      result[8].toAddress(),
      result[9].toBigInt()
    );
  }

  try_getProposal(
    _proposalId: BigInt
  ): ethereum.CallResult<ConvictionVoting__getProposalResult> {
    let result = super.tryCall(
      "getProposal",
      "getProposal(uint256):(uint256,bool,address,uint256,uint256,uint64,uint256,uint8,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ConvictionVoting__getProposalResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toI32(),
        value[8].toAddress(),
        value[9].toBigInt()
      )
    );
  }

  SET_AGREEMENT_ROLE(): Bytes {
    let result = super.call(
      "SET_AGREEMENT_ROLE",
      "SET_AGREEMENT_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SET_AGREEMENT_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SET_AGREEMENT_ROLE",
      "SET_AGREEMENT_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  kernel(): Address {
    let result = super.call("kernel", "kernel():(address)", []);

    return result[0].toAddress();
  }

  try_kernel(): ethereum.CallResult<Address> {
    let result = super.tryCall("kernel", "kernel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onApprove(_holder: Address, _spender: Address, _amount: BigInt): boolean {
    let result = super.call(
      "onApprove",
      "onApprove(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_holder),
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_onApprove(
    _holder: Address,
    _spender: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onApprove",
      "onApprove(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_holder),
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  calculateConviction(
    _timePassed: BigInt,
    _lastConv: BigInt,
    _oldAmount: BigInt
  ): BigInt {
    let result = super.call(
      "calculateConviction",
      "calculateConviction(uint64,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_timePassed),
        ethereum.Value.fromUnsignedBigInt(_lastConv),
        ethereum.Value.fromUnsignedBigInt(_oldAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateConviction(
    _timePassed: BigInt,
    _lastConv: BigInt,
    _oldAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateConviction",
      "calculateConviction(uint64,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_timePassed),
        ethereum.Value.fromUnsignedBigInt(_lastConv),
        ethereum.Value.fromUnsignedBigInt(_oldAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minThresholdStakePercentage(): BigInt {
    let result = super.call(
      "minThresholdStakePercentage",
      "minThresholdStakePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minThresholdStakePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minThresholdStakePercentage",
      "minThresholdStakePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PAUSE_CONTRACT_ROLE(): Bytes {
    let result = super.call(
      "PAUSE_CONTRACT_ROLE",
      "PAUSE_CONTRACT_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PAUSE_CONTRACT_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PAUSE_CONTRACT_ROLE",
      "PAUSE_CONTRACT_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ONE_HUNDRED_PERCENT(): BigInt {
    let result = super.call(
      "ONE_HUNDRED_PERCENT",
      "ONE_HUNDRED_PERCENT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ONE_HUNDRED_PERCENT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ONE_HUNDRED_PERCENT",
      "ONE_HUNDRED_PERCENT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalVoterStake(_voter: Address): BigInt {
    let result = super.call(
      "getTotalVoterStake",
      "getTotalVoterStake(address):(uint256)",
      [ethereum.Value.fromAddress(_voter)]
    );

    return result[0].toBigInt();
  }

  try_getTotalVoterStake(_voter: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalVoterStake",
      "getTotalVoterStake(address):(uint256)",
      [ethereum.Value.fromAddress(_voter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isPetrified(): boolean {
    let result = super.call("isPetrified", "isPetrified():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPetrified(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPetrified", "isPetrified():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getProposalVoterStake(_proposalId: BigInt, _voter: Address): BigInt {
    let result = super.call(
      "getProposalVoterStake",
      "getProposalVoterStake(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_proposalId),
        ethereum.Value.fromAddress(_voter)
      ]
    );

    return result[0].toBigInt();
  }

  try_getProposalVoterStake(
    _proposalId: BigInt,
    _voter: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProposalVoterStake",
      "getProposalVoterStake(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_proposalId),
        ethereum.Value.fromAddress(_voter)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CREATE_PROPOSALS_ROLE(): Bytes {
    let result = super.call(
      "CREATE_PROPOSALS_ROLE",
      "CREATE_PROPOSALS_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CREATE_PROPOSALS_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CREATE_PROPOSALS_ROLE",
      "CREATE_PROPOSALS_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  CANCEL_PROPOSALS_ROLE(): Bytes {
    let result = super.call(
      "CANCEL_PROPOSALS_ROLE",
      "CANCEL_PROPOSALS_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CANCEL_PROPOSALS_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CANCEL_PROPOSALS_ROLE",
      "CANCEL_PROPOSALS_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ExecuteProposalCall extends ethereum.Call {
  get inputs(): ExecuteProposalCall__Inputs {
    return new ExecuteProposalCall__Inputs(this);
  }

  get outputs(): ExecuteProposalCall__Outputs {
    return new ExecuteProposalCall__Outputs(this);
  }
}

export class ExecuteProposalCall__Inputs {
  _call: ExecuteProposalCall;

  constructor(call: ExecuteProposalCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteProposalCall__Outputs {
  _call: ExecuteProposalCall;

  constructor(call: ExecuteProposalCall) {
    this._call = call;
  }
}

export class StakeAllToProposalCall extends ethereum.Call {
  get inputs(): StakeAllToProposalCall__Inputs {
    return new StakeAllToProposalCall__Inputs(this);
  }

  get outputs(): StakeAllToProposalCall__Outputs {
    return new StakeAllToProposalCall__Outputs(this);
  }
}

export class StakeAllToProposalCall__Inputs {
  _call: StakeAllToProposalCall;

  constructor(call: StakeAllToProposalCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeAllToProposalCall__Outputs {
  _call: StakeAllToProposalCall;

  constructor(call: StakeAllToProposalCall) {
    this._call = call;
  }
}

export class SetAgreementCall extends ethereum.Call {
  get inputs(): SetAgreementCall__Inputs {
    return new SetAgreementCall__Inputs(this);
  }

  get outputs(): SetAgreementCall__Outputs {
    return new SetAgreementCall__Outputs(this);
  }
}

export class SetAgreementCall__Inputs {
  _call: SetAgreementCall;

  constructor(call: SetAgreementCall) {
    this._call = call;
  }

  get _agreement(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAgreementCall__Outputs {
  _call: SetAgreementCall;

  constructor(call: SetAgreementCall) {
    this._call = call;
  }
}

export class SetStableTokenOracleSettingsCall extends ethereum.Call {
  get inputs(): SetStableTokenOracleSettingsCall__Inputs {
    return new SetStableTokenOracleSettingsCall__Inputs(this);
  }

  get outputs(): SetStableTokenOracleSettingsCall__Outputs {
    return new SetStableTokenOracleSettingsCall__Outputs(this);
  }
}

export class SetStableTokenOracleSettingsCall__Inputs {
  _call: SetStableTokenOracleSettingsCall;

  constructor(call: SetStableTokenOracleSettingsCall) {
    this._call = call;
  }

  get _stableTokenOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stableToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetStableTokenOracleSettingsCall__Outputs {
  _call: SetStableTokenOracleSettingsCall;

  constructor(call: SetStableTokenOracleSettingsCall) {
    this._call = call;
  }
}

export class OnTransferCall extends ethereum.Call {
  get inputs(): OnTransferCall__Inputs {
    return new OnTransferCall__Inputs(this);
  }

  get outputs(): OnTransferCall__Outputs {
    return new OnTransferCall__Outputs(this);
  }
}

export class OnTransferCall__Inputs {
  _call: OnTransferCall;

  constructor(call: OnTransferCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OnTransferCall__Outputs {
  _call: OnTransferCall;

  constructor(call: OnTransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnRegisterAsHookCall extends ethereum.Call {
  get inputs(): OnRegisterAsHookCall__Inputs {
    return new OnRegisterAsHookCall__Inputs(this);
  }

  get outputs(): OnRegisterAsHookCall__Outputs {
    return new OnRegisterAsHookCall__Outputs(this);
  }
}

export class OnRegisterAsHookCall__Inputs {
  _call: OnRegisterAsHookCall;

  constructor(call: OnRegisterAsHookCall) {
    this._call = call;
  }

  get _hookId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class OnRegisterAsHookCall__Outputs {
  _call: OnRegisterAsHookCall;

  constructor(call: OnRegisterAsHookCall) {
    this._call = call;
  }
}

export class AddProposalCall extends ethereum.Call {
  get inputs(): AddProposalCall__Inputs {
    return new AddProposalCall__Inputs(this);
  }

  get outputs(): AddProposalCall__Outputs {
    return new AddProposalCall__Outputs(this);
  }
}

export class AddProposalCall__Inputs {
  _call: AddProposalCall;

  constructor(call: AddProposalCall) {
    this._call = call;
  }

  get _title(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _link(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _requestedAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _stableRequestAmount(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class AddProposalCall__Outputs {
  _call: AddProposalCall;

  constructor(call: AddProposalCall) {
    this._call = call;
  }
}

export class WithdrawAllFromProposalCall extends ethereum.Call {
  get inputs(): WithdrawAllFromProposalCall__Inputs {
    return new WithdrawAllFromProposalCall__Inputs(this);
  }

  get outputs(): WithdrawAllFromProposalCall__Outputs {
    return new WithdrawAllFromProposalCall__Outputs(this);
  }
}

export class WithdrawAllFromProposalCall__Inputs {
  _call: WithdrawAllFromProposalCall;

  constructor(call: WithdrawAllFromProposalCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawAllFromProposalCall__Outputs {
  _call: WithdrawAllFromProposalCall;

  constructor(call: WithdrawAllFromProposalCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _stakeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _requestToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stableToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _stableTokenOracle(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _vault(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _decay(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _maxRatio(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _weight(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _minThresholdStakePercentage(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class WithdrawFromProposalCall extends ethereum.Call {
  get inputs(): WithdrawFromProposalCall__Inputs {
    return new WithdrawFromProposalCall__Inputs(this);
  }

  get outputs(): WithdrawFromProposalCall__Outputs {
    return new WithdrawFromProposalCall__Outputs(this);
  }
}

export class WithdrawFromProposalCall__Inputs {
  _call: WithdrawFromProposalCall;

  constructor(call: WithdrawFromProposalCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFromProposalCall__Outputs {
  _call: WithdrawFromProposalCall;

  constructor(call: WithdrawFromProposalCall) {
    this._call = call;
  }
}

export class OnDisputableActionAllowedCall extends ethereum.Call {
  get inputs(): OnDisputableActionAllowedCall__Inputs {
    return new OnDisputableActionAllowedCall__Inputs(this);
  }

  get outputs(): OnDisputableActionAllowedCall__Outputs {
    return new OnDisputableActionAllowedCall__Outputs(this);
  }
}

export class OnDisputableActionAllowedCall__Inputs {
  _call: OnDisputableActionAllowedCall;

  constructor(call: OnDisputableActionAllowedCall) {
    this._call = call;
  }

  get _disputableActionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OnDisputableActionAllowedCall__Outputs {
  _call: OnDisputableActionAllowedCall;

  constructor(call: OnDisputableActionAllowedCall) {
    this._call = call;
  }
}

export class OnDisputableActionChallengedCall extends ethereum.Call {
  get inputs(): OnDisputableActionChallengedCall__Inputs {
    return new OnDisputableActionChallengedCall__Inputs(this);
  }

  get outputs(): OnDisputableActionChallengedCall__Outputs {
    return new OnDisputableActionChallengedCall__Outputs(this);
  }
}

export class OnDisputableActionChallengedCall__Inputs {
  _call: OnDisputableActionChallengedCall;

  constructor(call: OnDisputableActionChallengedCall) {
    this._call = call;
  }

  get _disputableActionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _challengeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _challenger(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class OnDisputableActionChallengedCall__Outputs {
  _call: OnDisputableActionChallengedCall;

  constructor(call: OnDisputableActionChallengedCall) {
    this._call = call;
  }
}

export class TransferToVaultCall extends ethereum.Call {
  get inputs(): TransferToVaultCall__Inputs {
    return new TransferToVaultCall__Inputs(this);
  }

  get outputs(): TransferToVaultCall__Outputs {
    return new TransferToVaultCall__Outputs(this);
  }
}

export class TransferToVaultCall__Inputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferToVaultCall__Outputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }
}

export class WithdrawFromInactiveProposalsCall extends ethereum.Call {
  get inputs(): WithdrawFromInactiveProposalsCall__Inputs {
    return new WithdrawFromInactiveProposalsCall__Inputs(this);
  }

  get outputs(): WithdrawFromInactiveProposalsCall__Outputs {
    return new WithdrawFromInactiveProposalsCall__Outputs(this);
  }
}

export class WithdrawFromInactiveProposalsCall__Inputs {
  _call: WithdrawFromInactiveProposalsCall;

  constructor(call: WithdrawFromInactiveProposalsCall) {
    this._call = call;
  }
}

export class WithdrawFromInactiveProposalsCall__Outputs {
  _call: WithdrawFromInactiveProposalsCall;

  constructor(call: WithdrawFromInactiveProposalsCall) {
    this._call = call;
  }
}

export class GetTokenManagerCall extends ethereum.Call {
  get inputs(): GetTokenManagerCall__Inputs {
    return new GetTokenManagerCall__Inputs(this);
  }

  get outputs(): GetTokenManagerCall__Outputs {
    return new GetTokenManagerCall__Outputs(this);
  }
}

export class GetTokenManagerCall__Inputs {
  _call: GetTokenManagerCall;

  constructor(call: GetTokenManagerCall) {
    this._call = call;
  }
}

export class GetTokenManagerCall__Outputs {
  _call: GetTokenManagerCall;

  constructor(call: GetTokenManagerCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class OnDisputableActionVoidedCall extends ethereum.Call {
  get inputs(): OnDisputableActionVoidedCall__Inputs {
    return new OnDisputableActionVoidedCall__Inputs(this);
  }

  get outputs(): OnDisputableActionVoidedCall__Outputs {
    return new OnDisputableActionVoidedCall__Outputs(this);
  }
}

export class OnDisputableActionVoidedCall__Inputs {
  _call: OnDisputableActionVoidedCall;

  constructor(call: OnDisputableActionVoidedCall) {
    this._call = call;
  }

  get _disputableActionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OnDisputableActionVoidedCall__Outputs {
  _call: OnDisputableActionVoidedCall;

  constructor(call: OnDisputableActionVoidedCall) {
    this._call = call;
  }
}

export class OnRevokeAsHookCall extends ethereum.Call {
  get inputs(): OnRevokeAsHookCall__Inputs {
    return new OnRevokeAsHookCall__Inputs(this);
  }

  get outputs(): OnRevokeAsHookCall__Outputs {
    return new OnRevokeAsHookCall__Outputs(this);
  }
}

export class OnRevokeAsHookCall__Inputs {
  _call: OnRevokeAsHookCall;

  constructor(call: OnRevokeAsHookCall) {
    this._call = call;
  }

  get _hookId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class OnRevokeAsHookCall__Outputs {
  _call: OnRevokeAsHookCall;

  constructor(call: OnRevokeAsHookCall) {
    this._call = call;
  }
}

export class SetConvictionCalculationSettingsCall extends ethereum.Call {
  get inputs(): SetConvictionCalculationSettingsCall__Inputs {
    return new SetConvictionCalculationSettingsCall__Inputs(this);
  }

  get outputs(): SetConvictionCalculationSettingsCall__Outputs {
    return new SetConvictionCalculationSettingsCall__Outputs(this);
  }
}

export class SetConvictionCalculationSettingsCall__Inputs {
  _call: SetConvictionCalculationSettingsCall;

  constructor(call: SetConvictionCalculationSettingsCall) {
    this._call = call;
  }

  get _decay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxRatio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _weight(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minThresholdStakePercentage(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetConvictionCalculationSettingsCall__Outputs {
  _call: SetConvictionCalculationSettingsCall;

  constructor(call: SetConvictionCalculationSettingsCall) {
    this._call = call;
  }
}

export class AddSignalingProposalCall extends ethereum.Call {
  get inputs(): AddSignalingProposalCall__Inputs {
    return new AddSignalingProposalCall__Inputs(this);
  }

  get outputs(): AddSignalingProposalCall__Outputs {
    return new AddSignalingProposalCall__Outputs(this);
  }
}

export class AddSignalingProposalCall__Inputs {
  _call: AddSignalingProposalCall;

  constructor(call: AddSignalingProposalCall) {
    this._call = call;
  }

  get _title(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _link(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AddSignalingProposalCall__Outputs {
  _call: AddSignalingProposalCall;

  constructor(call: AddSignalingProposalCall) {
    this._call = call;
  }
}

export class OnApproveCall extends ethereum.Call {
  get inputs(): OnApproveCall__Inputs {
    return new OnApproveCall__Inputs(this);
  }

  get outputs(): OnApproveCall__Outputs {
    return new OnApproveCall__Outputs(this);
  }
}

export class OnApproveCall__Inputs {
  _call: OnApproveCall;

  constructor(call: OnApproveCall) {
    this._call = call;
  }

  get _holder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OnApproveCall__Outputs {
  _call: OnApproveCall;

  constructor(call: OnApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelProposalCall extends ethereum.Call {
  get inputs(): CancelProposalCall__Inputs {
    return new CancelProposalCall__Inputs(this);
  }

  get outputs(): CancelProposalCall__Outputs {
    return new CancelProposalCall__Outputs(this);
  }
}

export class CancelProposalCall__Inputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelProposalCall__Outputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }
}

export class PauseContractCall extends ethereum.Call {
  get inputs(): PauseContractCall__Inputs {
    return new PauseContractCall__Inputs(this);
  }

  get outputs(): PauseContractCall__Outputs {
    return new PauseContractCall__Outputs(this);
  }
}

export class PauseContractCall__Inputs {
  _call: PauseContractCall;

  constructor(call: PauseContractCall) {
    this._call = call;
  }

  get _pauseEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class PauseContractCall__Outputs {
  _call: PauseContractCall;

  constructor(call: PauseContractCall) {
    this._call = call;
  }
}

export class OnDisputableActionRejectedCall extends ethereum.Call {
  get inputs(): OnDisputableActionRejectedCall__Inputs {
    return new OnDisputableActionRejectedCall__Inputs(this);
  }

  get outputs(): OnDisputableActionRejectedCall__Outputs {
    return new OnDisputableActionRejectedCall__Outputs(this);
  }
}

export class OnDisputableActionRejectedCall__Inputs {
  _call: OnDisputableActionRejectedCall;

  constructor(call: OnDisputableActionRejectedCall) {
    this._call = call;
  }

  get _disputableActionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OnDisputableActionRejectedCall__Outputs {
  _call: OnDisputableActionRejectedCall;

  constructor(call: OnDisputableActionRejectedCall) {
    this._call = call;
  }
}

export class StakeToProposalCall extends ethereum.Call {
  get inputs(): StakeToProposalCall__Inputs {
    return new StakeToProposalCall__Inputs(this);
  }

  get outputs(): StakeToProposalCall__Outputs {
    return new StakeToProposalCall__Outputs(this);
  }
}

export class StakeToProposalCall__Inputs {
  _call: StakeToProposalCall;

  constructor(call: StakeToProposalCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeToProposalCall__Outputs {
  _call: StakeToProposalCall;

  constructor(call: StakeToProposalCall) {
    this._call = call;
  }
}
