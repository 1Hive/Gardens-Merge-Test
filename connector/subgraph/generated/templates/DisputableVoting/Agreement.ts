// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Signed extends ethereum.Event {
  get params(): Signed__Params {
    return new Signed__Params(this);
  }
}

export class Signed__Params {
  _event: Signed;

  constructor(event: Signed) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get settingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SettingChanged extends ethereum.Event {
  get params(): SettingChanged__Params {
    return new SettingChanged__Params(this);
  }
}

export class SettingChanged__Params {
  _event: SettingChanged;

  constructor(event: SettingChanged) {
    this._event = event;
  }

  get settingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AppFeesCashierSynced extends ethereum.Event {
  get params(): AppFeesCashierSynced__Params {
    return new AppFeesCashierSynced__Params(this);
  }
}

export class AppFeesCashierSynced__Params {
  _event: AppFeesCashierSynced;

  constructor(event: AppFeesCashierSynced) {
    this._event = event;
  }

  get newAppFeesCashier(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DisputableAppActivated extends ethereum.Event {
  get params(): DisputableAppActivated__Params {
    return new DisputableAppActivated__Params(this);
  }
}

export class DisputableAppActivated__Params {
  _event: DisputableAppActivated;

  constructor(event: DisputableAppActivated) {
    this._event = event;
  }

  get disputable(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DisputableAppDeactivated extends ethereum.Event {
  get params(): DisputableAppDeactivated__Params {
    return new DisputableAppDeactivated__Params(this);
  }
}

export class DisputableAppDeactivated__Params {
  _event: DisputableAppDeactivated;

  constructor(event: DisputableAppDeactivated) {
    this._event = event;
  }

  get disputable(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CollateralRequirementChanged extends ethereum.Event {
  get params(): CollateralRequirementChanged__Params {
    return new CollateralRequirementChanged__Params(this);
  }
}

export class CollateralRequirementChanged__Params {
  _event: CollateralRequirementChanged;

  constructor(event: CollateralRequirementChanged) {
    this._event = event;
  }

  get disputable(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateralRequirementId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ScriptResult extends ethereum.Event {
  get params(): ScriptResult__Params {
    return new ScriptResult__Params(this);
  }
}

export class ScriptResult__Params {
  _event: ScriptResult;

  constructor(event: ScriptResult) {
    this._event = event;
  }

  get executor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get script(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get input(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get returnData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class RecoverToVault extends ethereum.Event {
  get params(): RecoverToVault__Params {
    return new RecoverToVault__Params(this);
  }
}

export class RecoverToVault__Params {
  _event: RecoverToVault;

  constructor(event: RecoverToVault) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ActionSubmitted extends ethereum.Event {
  get params(): ActionSubmitted__Params {
    return new ActionSubmitted__Params(this);
  }
}

export class ActionSubmitted__Params {
  _event: ActionSubmitted;

  constructor(event: ActionSubmitted) {
    this._event = event;
  }

  get actionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get disputable(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ActionClosed extends ethereum.Event {
  get params(): ActionClosed__Params {
    return new ActionClosed__Params(this);
  }
}

export class ActionClosed__Params {
  _event: ActionClosed;

  constructor(event: ActionClosed) {
    this._event = event;
  }

  get actionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ActionChallenged extends ethereum.Event {
  get params(): ActionChallenged__Params {
    return new ActionChallenged__Params(this);
  }
}

export class ActionChallenged__Params {
  _event: ActionChallenged;

  constructor(event: ActionChallenged) {
    this._event = event;
  }

  get actionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get challengeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ActionSettled extends ethereum.Event {
  get params(): ActionSettled__Params {
    return new ActionSettled__Params(this);
  }
}

export class ActionSettled__Params {
  _event: ActionSettled;

  constructor(event: ActionSettled) {
    this._event = event;
  }

  get actionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get challengeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ActionDisputed extends ethereum.Event {
  get params(): ActionDisputed__Params {
    return new ActionDisputed__Params(this);
  }
}

export class ActionDisputed__Params {
  _event: ActionDisputed;

  constructor(event: ActionDisputed) {
    this._event = event;
  }

  get actionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get challengeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ActionAccepted extends ethereum.Event {
  get params(): ActionAccepted__Params {
    return new ActionAccepted__Params(this);
  }
}

export class ActionAccepted__Params {
  _event: ActionAccepted;

  constructor(event: ActionAccepted) {
    this._event = event;
  }

  get actionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get challengeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ActionVoided extends ethereum.Event {
  get params(): ActionVoided__Params {
    return new ActionVoided__Params(this);
  }
}

export class ActionVoided__Params {
  _event: ActionVoided;

  constructor(event: ActionVoided) {
    this._event = event;
  }

  get actionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get challengeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ActionRejected extends ethereum.Event {
  get params(): ActionRejected__Params {
    return new ActionRejected__Params(this);
  }
}

export class ActionRejected__Params {
  _event: ActionRejected;

  constructor(event: ActionRejected) {
    this._event = event;
  }

  get actionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get challengeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Ruled extends ethereum.Event {
  get params(): Ruled__Params {
    return new Ruled__Params(this);
  }
}

export class Ruled__Params {
  _event: Ruled;

  constructor(event: Ruled) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get disputeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ruling(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EvidenceSubmitted extends ethereum.Event {
  get params(): EvidenceSubmitted__Params {
    return new EvidenceSubmitted__Params(this);
  }
}

export class EvidenceSubmitted__Params {
  _event: EvidenceSubmitted;

  constructor(event: EvidenceSubmitted) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get disputeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get submitter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get evidence(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get finished(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class Agreement__getSignerResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class Agreement__getChallengeResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Bytes;
  value4: BigInt;
  value5: i32;
  value6: boolean;
  value7: boolean;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Bytes,
    value4: BigInt,
    value5: i32,
    value6: boolean,
    value7: boolean,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class Agreement__getCollateralRequirementResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Agreement__getSettingResult {
  value0: Address;
  value1: Address;
  value2: string;
  value3: Bytes;

  constructor(value0: Address, value1: Address, value2: string, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    return map;
  }
}

export class Agreement__getActionResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: boolean;
  value6: Bytes;
  value7: BigInt;
  value8: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: boolean,
    value6: Bytes,
    value7: BigInt,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromBytes(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }
}

export class Agreement__getDisputableInfoResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Agreement__getChallengeArbitratorFeesResult {
  value0: Address;
  value1: BigInt;
  value2: Address;
  value3: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Address,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Agreement extends ethereum.SmartContract {
  static bind(address: Address): Agreement {
    return new Agreement("Agreement", address);
  }

  supportsInterface(_interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canPerformChallenge(_actionId: BigInt, _challenger: Address): boolean {
    let result = super.call(
      "canPerformChallenge",
      "canPerformChallenge(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_actionId),
        ethereum.Value.fromAddress(_challenger)
      ]
    );

    return result[0].toBoolean();
  }

  try_canPerformChallenge(
    _actionId: BigInt,
    _challenger: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canPerformChallenge",
      "canPerformChallenge(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_actionId),
        ethereum.Value.fromAddress(_challenger)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasInitialized(): boolean {
    let result = super.call("hasInitialized", "hasInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasInitialized", "hasInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getSigner(_signer: Address): Agreement__getSignerResult {
    let result = super.call("getSigner", "getSigner(address):(uint256,bool)", [
      ethereum.Value.fromAddress(_signer)
    ]);

    return new Agreement__getSignerResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_getSigner(
    _signer: Address
  ): ethereum.CallResult<Agreement__getSignerResult> {
    let result = super.tryCall(
      "getSigner",
      "getSigner(address):(uint256,bool)",
      [ethereum.Value.fromAddress(_signer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Agreement__getSignerResult(value[0].toBigInt(), value[1].toBoolean())
    );
  }

  getChallenge(_challengeId: BigInt): Agreement__getChallengeResult {
    let result = super.call(
      "getChallenge",
      "getChallenge(uint256):(uint256,address,uint64,bytes,uint256,uint8,bool,bool,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_challengeId)]
    );

    return new Agreement__getChallengeResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBytes(),
      result[4].toBigInt(),
      result[5].toI32(),
      result[6].toBoolean(),
      result[7].toBoolean(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_getChallenge(
    _challengeId: BigInt
  ): ethereum.CallResult<Agreement__getChallengeResult> {
    let result = super.tryCall(
      "getChallenge",
      "getChallenge(uint256):(uint256,address,uint64,bytes,uint256,uint8,bool,bool,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_challengeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Agreement__getChallengeResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBytes(),
        value[4].toBigInt(),
        value[5].toI32(),
        value[6].toBoolean(),
        value[7].toBoolean(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  getCollateralRequirement(
    _disputable: Address,
    _collateralRequirementId: BigInt
  ): Agreement__getCollateralRequirementResult {
    let result = super.call(
      "getCollateralRequirement",
      "getCollateralRequirement(address,uint256):(address,uint64,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_disputable),
        ethereum.Value.fromUnsignedBigInt(_collateralRequirementId)
      ]
    );

    return new Agreement__getCollateralRequirementResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getCollateralRequirement(
    _disputable: Address,
    _collateralRequirementId: BigInt
  ): ethereum.CallResult<Agreement__getCollateralRequirementResult> {
    let result = super.tryCall(
      "getCollateralRequirement",
      "getCollateralRequirement(address,uint256):(address,uint64,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_disputable),
        ethereum.Value.fromUnsignedBigInt(_collateralRequirementId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Agreement__getCollateralRequirementResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  stakingFactory(): Address {
    let result = super.call("stakingFactory", "stakingFactory():(address)", []);

    return result[0].toAddress();
  }

  try_stakingFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingFactory",
      "stakingFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEVMScriptExecutor(_script: Bytes): Address {
    let result = super.call(
      "getEVMScriptExecutor",
      "getEVMScriptExecutor(bytes):(address)",
      [ethereum.Value.fromBytes(_script)]
    );

    return result[0].toAddress();
  }

  try_getEVMScriptExecutor(_script: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEVMScriptExecutor",
      "getEVMScriptExecutor(bytes):(address)",
      [ethereum.Value.fromBytes(_script)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canPerform(
    param0: Address,
    param1: Address,
    param2: Bytes,
    _how: Array<BigInt>
  ): boolean {
    let result = super.call(
      "canPerform",
      "canPerform(address,address,bytes32,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromUnsignedBigIntArray(_how)
      ]
    );

    return result[0].toBoolean();
  }

  try_canPerform(
    param0: Address,
    param1: Address,
    param2: Bytes,
    _how: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canPerform",
      "canPerform(address,address,bytes32,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromUnsignedBigIntArray(_how)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  MANAGE_DISPUTABLE_ROLE(): Bytes {
    let result = super.call(
      "MANAGE_DISPUTABLE_ROLE",
      "MANAGE_DISPUTABLE_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_MANAGE_DISPUTABLE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MANAGE_DISPUTABLE_ROLE",
      "MANAGE_DISPUTABLE_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  canUnlock(param0: Address, param1: BigInt): boolean {
    let result = super.call("canUnlock", "canUnlock(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBoolean();
  }

  try_canUnlock(param0: Address, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canUnlock",
      "canUnlock(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getRecoveryVault(): Address {
    let result = super.call(
      "getRecoveryVault",
      "getRecoveryVault():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getRecoveryVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRecoveryVault",
      "getRecoveryVault():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canRuleDispute(_actionId: BigInt): boolean {
    let result = super.call(
      "canRuleDispute",
      "canRuleDispute(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_actionId)]
    );

    return result[0].toBoolean();
  }

  try_canRuleDispute(_actionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canRuleDispute",
      "canRuleDispute(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_actionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getSetting(_settingId: BigInt): Agreement__getSettingResult {
    let result = super.call(
      "getSetting",
      "getSetting(uint256):(address,address,string,bytes)",
      [ethereum.Value.fromUnsignedBigInt(_settingId)]
    );

    return new Agreement__getSettingResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBytes()
    );
  }

  try_getSetting(
    _settingId: BigInt
  ): ethereum.CallResult<Agreement__getSettingResult> {
    let result = super.tryCall(
      "getSetting",
      "getSetting(uint256):(address,address,string,bytes)",
      [ethereum.Value.fromUnsignedBigInt(_settingId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Agreement__getSettingResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBytes()
      )
    );
  }

  canChallenge(_actionId: BigInt): boolean {
    let result = super.call("canChallenge", "canChallenge(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_actionId)
    ]);

    return result[0].toBoolean();
  }

  try_canChallenge(_actionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("canChallenge", "canChallenge(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_actionId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canClose(_actionId: BigInt): boolean {
    let result = super.call("canClose", "canClose(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_actionId)
    ]);

    return result[0].toBoolean();
  }

  try_canClose(_actionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("canClose", "canClose(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_actionId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowRecoverability(param0: Address): boolean {
    let result = super.call(
      "allowRecoverability",
      "allowRecoverability(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_allowRecoverability(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowRecoverability",
      "allowRecoverability(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  appId(): Bytes {
    let result = super.call("appId", "appId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_appId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("appId", "appId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getInitializationBlock(): BigInt {
    let result = super.call(
      "getInitializationBlock",
      "getInitializationBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getInitializationBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInitializationBlock",
      "getInitializationBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CHALLENGE_ROLE(): Bytes {
    let result = super.call("CHALLENGE_ROLE", "CHALLENGE_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_CHALLENGE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CHALLENGE_ROLE",
      "CHALLENGE_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  canPerform1(_sender: Address, _role: Bytes, _params: Array<BigInt>): boolean {
    let result = super.call(
      "canPerform",
      "canPerform(address,bytes32,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromFixedBytes(_role),
        ethereum.Value.fromUnsignedBigIntArray(_params)
      ]
    );

    return result[0].toBoolean();
  }

  try_canPerform1(
    _sender: Address,
    _role: Bytes,
    _params: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canPerform",
      "canPerform(address,bytes32,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromFixedBytes(_role),
        ethereum.Value.fromUnsignedBigIntArray(_params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getEVMScriptRegistry(): Address {
    let result = super.call(
      "getEVMScriptRegistry",
      "getEVMScriptRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getEVMScriptRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEVMScriptRegistry",
      "getEVMScriptRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canDispute(_actionId: BigInt): boolean {
    let result = super.call("canDispute", "canDispute(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_actionId)
    ]);

    return result[0].toBoolean();
  }

  try_canDispute(_actionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("canDispute", "canDispute(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_actionId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCurrentSettingId(): BigInt {
    let result = super.call(
      "getCurrentSettingId",
      "getCurrentSettingId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentSettingId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentSettingId",
      "getCurrentSettingId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAction(_actionId: BigInt): Agreement__getActionResult {
    let result = super.call(
      "getAction",
      "getAction(uint256):(address,uint256,uint256,uint256,address,bool,bytes,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_actionId)]
    );

    return new Agreement__getActionResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBoolean(),
      result[6].toBytes(),
      result[7].toBigInt(),
      result[8].toBoolean()
    );
  }

  try_getAction(
    _actionId: BigInt
  ): ethereum.CallResult<Agreement__getActionResult> {
    let result = super.tryCall(
      "getAction",
      "getAction(uint256):(address,uint256,uint256,uint256,address,bool,bytes,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_actionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Agreement__getActionResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBoolean(),
        value[6].toBytes(),
        value[7].toBigInt(),
        value[8].toBoolean()
      )
    );
  }

  getDisputableInfo(_disputable: Address): Agreement__getDisputableInfoResult {
    let result = super.call(
      "getDisputableInfo",
      "getDisputableInfo(address):(bool,uint256)",
      [ethereum.Value.fromAddress(_disputable)]
    );

    return new Agreement__getDisputableInfoResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getDisputableInfo(
    _disputable: Address
  ): ethereum.CallResult<Agreement__getDisputableInfoResult> {
    let result = super.tryCall(
      "getDisputableInfo",
      "getDisputableInfo(address):(bool,uint256)",
      [ethereum.Value.fromAddress(_disputable)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Agreement__getDisputableInfoResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  CHANGE_AGREEMENT_ROLE(): Bytes {
    let result = super.call(
      "CHANGE_AGREEMENT_ROLE",
      "CHANGE_AGREEMENT_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CHANGE_AGREEMENT_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CHANGE_AGREEMENT_ROLE",
      "CHANGE_AGREEMENT_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  canClaimSettlement(_actionId: BigInt): boolean {
    let result = super.call(
      "canClaimSettlement",
      "canClaimSettlement(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_actionId)]
    );

    return result[0].toBoolean();
  }

  try_canClaimSettlement(_actionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canClaimSettlement",
      "canClaimSettlement(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_actionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  kernel(): Address {
    let result = super.call("kernel", "kernel():(address)", []);

    return result[0].toAddress();
  }

  try_kernel(): ethereum.CallResult<Address> {
    let result = super.tryCall("kernel", "kernel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isPetrified(): boolean {
    let result = super.call("isPetrified", "isPetrified():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPetrified(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPetrified", "isPetrified():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canSettle(_actionId: BigInt): boolean {
    let result = super.call("canSettle", "canSettle(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_actionId)
    ]);

    return result[0].toBoolean();
  }

  try_canSettle(_actionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("canSettle", "canSettle(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_actionId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  newAction(
    _disputableActionId: BigInt,
    _context: Bytes,
    _submitter: Address
  ): BigInt {
    let result = super.call(
      "newAction",
      "newAction(uint256,bytes,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_disputableActionId),
        ethereum.Value.fromBytes(_context),
        ethereum.Value.fromAddress(_submitter)
      ]
    );

    return result[0].toBigInt();
  }

  try_newAction(
    _disputableActionId: BigInt,
    _context: Bytes,
    _submitter: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "newAction",
      "newAction(uint256,bytes,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_disputableActionId),
        ethereum.Value.fromBytes(_context),
        ethereum.Value.fromAddress(_submitter)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChallengeArbitratorFees(
    _challengeId: BigInt
  ): Agreement__getChallengeArbitratorFeesResult {
    let result = super.call(
      "getChallengeArbitratorFees",
      "getChallengeArbitratorFees(uint256):(address,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_challengeId)]
    );

    return new Agreement__getChallengeArbitratorFeesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_getChallengeArbitratorFees(
    _challengeId: BigInt
  ): ethereum.CallResult<Agreement__getChallengeArbitratorFeesResult> {
    let result = super.tryCall(
      "getChallengeArbitratorFees",
      "getChallengeArbitratorFees(uint256):(address,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_challengeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Agreement__getChallengeArbitratorFeesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }
}

export class ChangeCollateralRequirementCall extends ethereum.Call {
  get inputs(): ChangeCollateralRequirementCall__Inputs {
    return new ChangeCollateralRequirementCall__Inputs(this);
  }

  get outputs(): ChangeCollateralRequirementCall__Outputs {
    return new ChangeCollateralRequirementCall__Outputs(this);
  }
}

export class ChangeCollateralRequirementCall__Inputs {
  _call: ChangeCollateralRequirementCall;

  constructor(call: ChangeCollateralRequirementCall) {
    this._call = call;
  }

  get _disputable(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateralToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _challengeDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _actionAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _challengeAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ChangeCollateralRequirementCall__Outputs {
  _call: ChangeCollateralRequirementCall;

  constructor(call: ChangeCollateralRequirementCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _arbitrator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _setAppFeesCashier(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _title(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _content(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _stakingFactory(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class DisputeActionCall extends ethereum.Call {
  get inputs(): DisputeActionCall__Inputs {
    return new DisputeActionCall__Inputs(this);
  }

  get outputs(): DisputeActionCall__Outputs {
    return new DisputeActionCall__Outputs(this);
  }
}

export class DisputeActionCall__Inputs {
  _call: DisputeActionCall;

  constructor(call: DisputeActionCall) {
    this._call = call;
  }

  get _actionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _submitterFinishedEvidence(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class DisputeActionCall__Outputs {
  _call: DisputeActionCall;

  constructor(call: DisputeActionCall) {
    this._call = call;
  }
}

export class SignCall extends ethereum.Call {
  get inputs(): SignCall__Inputs {
    return new SignCall__Inputs(this);
  }

  get outputs(): SignCall__Outputs {
    return new SignCall__Outputs(this);
  }
}

export class SignCall__Inputs {
  _call: SignCall;

  constructor(call: SignCall) {
    this._call = call;
  }

  get _settingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SignCall__Outputs {
  _call: SignCall;

  constructor(call: SignCall) {
    this._call = call;
  }
}

export class RuleCall extends ethereum.Call {
  get inputs(): RuleCall__Inputs {
    return new RuleCall__Inputs(this);
  }

  get outputs(): RuleCall__Outputs {
    return new RuleCall__Outputs(this);
  }
}

export class RuleCall__Inputs {
  _call: RuleCall;

  constructor(call: RuleCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ruling(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RuleCall__Outputs {
  _call: RuleCall;

  constructor(call: RuleCall) {
    this._call = call;
  }
}

export class ChallengeActionCall extends ethereum.Call {
  get inputs(): ChallengeActionCall__Inputs {
    return new ChallengeActionCall__Inputs(this);
  }

  get outputs(): ChallengeActionCall__Outputs {
    return new ChallengeActionCall__Outputs(this);
  }
}

export class ChallengeActionCall__Inputs {
  _call: ChallengeActionCall;

  constructor(call: ChallengeActionCall) {
    this._call = call;
  }

  get _actionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _settlementOffer(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _finishedEvidence(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _context(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ChallengeActionCall__Outputs {
  _call: ChallengeActionCall;

  constructor(call: ChallengeActionCall) {
    this._call = call;
  }
}

export class ActivateCall extends ethereum.Call {
  get inputs(): ActivateCall__Inputs {
    return new ActivateCall__Inputs(this);
  }

  get outputs(): ActivateCall__Outputs {
    return new ActivateCall__Outputs(this);
  }
}

export class ActivateCall__Inputs {
  _call: ActivateCall;

  constructor(call: ActivateCall) {
    this._call = call;
  }

  get _disputableAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateralToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _challengeDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _actionAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _challengeAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ActivateCall__Outputs {
  _call: ActivateCall;

  constructor(call: ActivateCall) {
    this._call = call;
  }
}

export class CloseActionCall extends ethereum.Call {
  get inputs(): CloseActionCall__Inputs {
    return new CloseActionCall__Inputs(this);
  }

  get outputs(): CloseActionCall__Outputs {
    return new CloseActionCall__Outputs(this);
  }
}

export class CloseActionCall__Inputs {
  _call: CloseActionCall;

  constructor(call: CloseActionCall) {
    this._call = call;
  }

  get _actionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseActionCall__Outputs {
  _call: CloseActionCall;

  constructor(call: CloseActionCall) {
    this._call = call;
  }
}

export class SettleActionCall extends ethereum.Call {
  get inputs(): SettleActionCall__Inputs {
    return new SettleActionCall__Inputs(this);
  }

  get outputs(): SettleActionCall__Outputs {
    return new SettleActionCall__Outputs(this);
  }
}

export class SettleActionCall__Inputs {
  _call: SettleActionCall;

  constructor(call: SettleActionCall) {
    this._call = call;
  }

  get _actionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SettleActionCall__Outputs {
  _call: SettleActionCall;

  constructor(call: SettleActionCall) {
    this._call = call;
  }
}

export class DeactivateCall extends ethereum.Call {
  get inputs(): DeactivateCall__Inputs {
    return new DeactivateCall__Inputs(this);
  }

  get outputs(): DeactivateCall__Outputs {
    return new DeactivateCall__Outputs(this);
  }
}

export class DeactivateCall__Inputs {
  _call: DeactivateCall;

  constructor(call: DeactivateCall) {
    this._call = call;
  }

  get _disputableAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeactivateCall__Outputs {
  _call: DeactivateCall;

  constructor(call: DeactivateCall) {
    this._call = call;
  }
}

export class ChangeSettingCall extends ethereum.Call {
  get inputs(): ChangeSettingCall__Inputs {
    return new ChangeSettingCall__Inputs(this);
  }

  get outputs(): ChangeSettingCall__Outputs {
    return new ChangeSettingCall__Outputs(this);
  }
}

export class ChangeSettingCall__Inputs {
  _call: ChangeSettingCall;

  constructor(call: ChangeSettingCall) {
    this._call = call;
  }

  get _arbitrator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _setAppFeesCashier(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _title(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _content(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ChangeSettingCall__Outputs {
  _call: ChangeSettingCall;

  constructor(call: ChangeSettingCall) {
    this._call = call;
  }
}

export class CloseEvidencePeriodCall extends ethereum.Call {
  get inputs(): CloseEvidencePeriodCall__Inputs {
    return new CloseEvidencePeriodCall__Inputs(this);
  }

  get outputs(): CloseEvidencePeriodCall__Outputs {
    return new CloseEvidencePeriodCall__Outputs(this);
  }
}

export class CloseEvidencePeriodCall__Inputs {
  _call: CloseEvidencePeriodCall;

  constructor(call: CloseEvidencePeriodCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseEvidencePeriodCall__Outputs {
  _call: CloseEvidencePeriodCall;

  constructor(call: CloseEvidencePeriodCall) {
    this._call = call;
  }
}

export class TransferToVaultCall extends ethereum.Call {
  get inputs(): TransferToVaultCall__Inputs {
    return new TransferToVaultCall__Inputs(this);
  }

  get outputs(): TransferToVaultCall__Outputs {
    return new TransferToVaultCall__Outputs(this);
  }
}

export class TransferToVaultCall__Inputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferToVaultCall__Outputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }
}

export class SubmitEvidenceCall extends ethereum.Call {
  get inputs(): SubmitEvidenceCall__Inputs {
    return new SubmitEvidenceCall__Inputs(this);
  }

  get outputs(): SubmitEvidenceCall__Outputs {
    return new SubmitEvidenceCall__Outputs(this);
  }
}

export class SubmitEvidenceCall__Inputs {
  _call: SubmitEvidenceCall;

  constructor(call: SubmitEvidenceCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _evidence(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _finished(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SubmitEvidenceCall__Outputs {
  _call: SubmitEvidenceCall;

  constructor(call: SubmitEvidenceCall) {
    this._call = call;
  }
}

export class SyncAppFeesCashierCall extends ethereum.Call {
  get inputs(): SyncAppFeesCashierCall__Inputs {
    return new SyncAppFeesCashierCall__Inputs(this);
  }

  get outputs(): SyncAppFeesCashierCall__Outputs {
    return new SyncAppFeesCashierCall__Outputs(this);
  }
}

export class SyncAppFeesCashierCall__Inputs {
  _call: SyncAppFeesCashierCall;

  constructor(call: SyncAppFeesCashierCall) {
    this._call = call;
  }
}

export class SyncAppFeesCashierCall__Outputs {
  _call: SyncAppFeesCashierCall;

  constructor(call: SyncAppFeesCashierCall) {
    this._call = call;
  }
}

export class NewActionCall extends ethereum.Call {
  get inputs(): NewActionCall__Inputs {
    return new NewActionCall__Inputs(this);
  }

  get outputs(): NewActionCall__Outputs {
    return new NewActionCall__Outputs(this);
  }
}

export class NewActionCall__Inputs {
  _call: NewActionCall;

  constructor(call: NewActionCall) {
    this._call = call;
  }

  get _disputableActionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _context(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _submitter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class NewActionCall__Outputs {
  _call: NewActionCall;

  constructor(call: NewActionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
