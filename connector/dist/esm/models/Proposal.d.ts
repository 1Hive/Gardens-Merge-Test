import ArbitratorFee from './ArbitratorFee';
import CollateralRequirement from './CollateralRequirement';
import { CastData, IHoneypotConnector, StakeData, StakeHistoryData, ProposalData, SubscriptionHandler, VotingConfigData } from '../types';
export default class Proposal {
    #private;
    readonly id: string;
    readonly number: string;
    readonly creator: string;
    readonly status: string;
    readonly type: string;
    readonly createdAt: string;
    readonly executedAt: string;
    readonly metadata?: string;
    readonly link?: string;
    readonly stakes?: StakeData[];
    readonly stakesHistory?: StakeHistoryData[];
    readonly beneficiary?: string;
    readonly requestedAmount?: string;
    readonly totalTokensStaked?: string;
    readonly stable?: boolean;
    readonly setting?: VotingConfigData;
    readonly startDate?: string;
    readonly totalPower?: string;
    readonly snapshotBlock?: string;
    readonly yeas?: string;
    readonly nays?: string;
    readonly quietEndingExtensionDuration?: string;
    readonly quietEndingSnapshotSupport?: string;
    readonly script?: string;
    readonly isAccepted?: boolean;
    readonly casts?: CastData[];
    readonly actionId?: string;
    readonly challengeId?: string;
    readonly challenger?: string;
    readonly challengeEndDate?: string;
    readonly disputeId?: string;
    readonly settledAt?: string;
    readonly settlementOffer?: string;
    readonly disputedAt?: string;
    readonly pausedAt?: string;
    readonly pauseDuration?: string;
    readonly submitterArbitratorFeeId?: string;
    readonly challengerArbitratorFeeId?: string;
    constructor(data: ProposalData, connector: IHoneypotConnector);
    collateralRequirement(): Promise<CollateralRequirement>;
    onCollateralRequirement(callback?: Function): SubscriptionHandler;
    submitterArbitratorFee(): Promise<ArbitratorFee | null>;
    onSubmitterArbitratorFee(callback?: Function): SubscriptionHandler;
    challengerArbitratorFee(): Promise<ArbitratorFee | null>;
    onChallengerArbitratorFee(callback?: Function): SubscriptionHandler;
}
//# sourceMappingURL=Proposal.d.ts.map